{"version":3,"sources":["services/api.ts","components/Characters/styles.ts","components/Buttons/index.tsx","components/Header/index.tsx","components/Input/index.tsx","components/Pesquisar/index.tsx","components/Row/index.tsx","components/Text/index.tsx","assets/logo.jpg","components/Characters/index.tsx","pages/Home/index.tsx","routes/index.tsx","themes/styles.tsx","themes/theme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["publicKey","time","Number","Date","hash","md5","api","axios","create","baseURL","params","ts","apikey","Container","styled","main","CardList","div","Card","props","thumbnail","path","extension","ButtonMore","typography","Name","p","Button","button","Header","Input","input","Buscar","Row","layout","Text","color","space","Characters","useState","characters","setCharacters","chave","setChave","char","setChar","isActive","setIsActive","useEffect","get","limit","then","response","novo","data","results","filter","item","substring","catch","err","console","log","handleMore","useCallback","a","offset","length","newArr","handleCharacters","handleComics","handleEvents","handleSeries","handleStageButtons","useMemo","fontSize","fontWeight","onClick","id","src","logo","alt","width","placeholder","value","onChange","e","target","nameStartsWith","map","person","name","description","Home","Router","element","GlobalStyles","createGlobalStyle","theme","colors","primary","fontSizes","body","bodyLarge","bodyExtraLarge","displayExtraLarge","fonts","secondary","Theme","children","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f2d92ba.chunk.js","sourcesContent":["import axios from 'axios';\nimport md5 from 'md5';\n\nconst publicKey = 'd21f6c71a496da355ec9f74349138dd4';\nconst privateKey = '99e524a90cec41f7ee9c8ff9c6a0a1ef502be8b8';\n\nconst time = Number(new Date());\n\nconst hash = md5(time + privateKey + publicKey);\n\nconst api = axios.create({\n    baseURL: 'http://gateway.marvel.com/v1/public/',\n    params: {\n        ts: time,\n        apikey: publicKey,\n        hash,\n    },\n});\n\nexport default api;","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\ninterface ThumbnailData {\n  thumbnail: {\n    path: string;\n    extension: string;\n  };\n}\n\nexport const Container = styled.main`\n  display: flex;\n  flex-wrap: wrap;\n\n  width: 100%;\n  height: 100%;\n`;\n\nexport const CardList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 0 auto;\n`;\n\nconst urlImg = (props: ThumbnailData) => \n`${props.thumbnail.path}.${props.thumbnail.extension}`\n\nexport const Card = styled.div`\n  background: #f1f1f1;\n  height: 450px;\n  width: 300px;\n  margin: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 2px 2px 10px 1px rgba(0, 0, 0, 0.3);\n\n  h2, p {\n    padding: 5px;\n    text-align: justify;\n  }\n\n  div#img {\n    height: 400px;\n    width: 100%;\n    background: url(${urlImg}) no-repeat center;\n    background-size: cover;\n    transition: all 3s;\n  }\n\n  &:hover {\n    div#img {\n      height: 200px;\n    }\n  }\n`;\n\ntype TextProps = TypographyProps;\n\nexport const ButtonMore = styled.div<TextProps>`\n  background: #f1f1f1;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n\n  cursor: pointer;\n  box-shadow: 2px 2px 10px 1px rgba(0, 0, 0, 0.3);\n  margin: 20px auto;\n  padding: 0 50px;\n  border-radius: 5px;\n  transition: all 0.3s;\n\n  &:hover {\n    background-color: red;\n  }\n\n  svg {\n    margin: 0 8px;\n  }\n\n  ${typography}\n`\n\nexport const Name = styled.p`\n  font-size: 18px;\n  font-weight: bold;\n`","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\ntype TextProps = TypographyProps;\n\nexport const Button = styled.button<TextProps>`\n  width: 200px;\n  height: 35px;\n  border-radius: 5px;\n  box-shadow: 1px 1px 5px 1px;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 20px;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n\n  ${typography}\n`","import styled from \"styled-components\";\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 100%;\n  height: 100px;\n  background-color: red;\n\n  img#logo {\n    width: 100px;\n    height: 80px;\n  }\n`","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  height: 35px;\n  width: 200px;\n  border-radius: 5px;\n  box-shadow: 1px 1px 5px 1px;\n  text-align: center;\n`","import styled from \"styled-components\";\n\nexport const Buscar = styled.button`\n  width: 50px;\n  border-radius: 5px;\n  box-shadow: 1px 1px 5px 1px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`","import styled from \"styled-components\";\nimport { layout, LayoutProps } from \"styled-system\";\n\ntype RowProps = LayoutProps;\n\nexport const Row = styled.div<RowProps>`\n  display: flex;\n  width: 300px;\n  justify-content: space-around;\n  ${layout}\n`","import styled from 'styled-components';\nimport { color, ColorProps, space, SpaceProps, typography, TypographyProps } from 'styled-system';\n\ntype TextProps = TypographyProps & SpaceProps & ColorProps;\n\nexport const Text = styled.p<TextProps>`\n  font-family: 14px;\n  color: #000;\n  ${color}\n  ${typography}\n  ${space}\n`","export default __webpack_public_path__ + \"static/media/logo.a0bc8a55.jpg\";","import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport api from '../../services/api';\nimport { ButtonMore, Card, CardList, Container, Name } from \"./styles\";\nimport { Header, Input, Buscar, Button, Row, Text } from \"../index\";\nimport logo from '../../assets/logo.jpg'\n\ninterface ResponseData {\n  id: string;\n  name: string;\n  description: string;\n  thumbnail: {\n    path: string;\n    extension: string;\n  };\n}\n\nconst Characters = () => {\n  const [characters, setCharacters] = useState<ResponseData[]>([]);\n  const [chave, setChave] = useState(\"events\");\n  const [char, setChar] = useState('');\n  const [isActive, setIsActive] = useState(true)\n\n\n    useEffect(() => {\n       api\n        .get(`/${chave}`, {\n          params: {\n            limit: 49\n          }\n        })\n        .then(response => {\n          const newArr = response.data.data.results\n          const novo = newArr.filter((item: { thumbnail: { path: string; }; }) => item.thumbnail.path.substring(44) !== \"image_not_available\")\n          setCharacters(novo)\n        })\n        .catch(err => console.log(err));\n      }, [chave])\n    \n    const handleMore = useCallback(async () => {\n      try {\n        const offset = characters.length;\n        const response = await api.get(`${chave}`, {\n          params: {\n            offset,\n            limit: 49\n          },\n        });\n        const newArr = response.data.data.results\n        const novo = newArr.filter((item: { thumbnail: { path: string; }; }) => item.thumbnail.path.substring(44) !== \"image_not_available\")\n        setCharacters([...characters, ...novo]);\n      } catch (err) {\n        console.log(err)\n      }\n    }, [characters, chave])\n\n    const handleCharacters = () => {\n      setChave(\"characters\")\n    }\n\n    const handleComics = () => {\n      setChave(\"comics\")\n    }\n\n    const handleEvents = () => {\n      setChave(\"events\")\n    }\n\n    const handleSeries = () => {\n      setChave(\"series\")\n    }\n\n    const handleStageButtons = useMemo(() => {\n          return (\n            <Fragment>\n                <Button>\n                  <Text fontSize=\"bodyExtraLarge\" fontWeight=\"bold\" onClick={handleCharacters}>Characters</Text>\n                </Button>\n                <Button>\n                  <Text fontSize=\"bodyExtraLarge\" fontWeight=\"bold\" onClick={handleComics}>Comics</Text>\n                </Button>\n                <Button>\n                  <Text fontSize=\"bodyExtraLarge\" fontWeight=\"bold\" onClick={handleEvents}>Events</Text>\n                </Button>\n                <Button>\n                  <Text fontSize=\"bodyExtraLarge\" fontWeight=\"bold\" onClick={handleSeries}>Series</Text>\n                </Button>\n            </Fragment>\n          )\n    }, []);\n\n    const handleSeach = () => {\n      api\n      .get(`/${chave}`, {\n        params: {\n          nameStartsWith: char,\n          limit: 50,\n        }\n      })\n      .then(response => {\n        const newArr = response.data.data.results\n          const novo = newArr.filter((item: { thumbnail: { path: string; }; }) => item.thumbnail.path.substring(44) !== \"image_not_available\")\n          setCharacters(novo)\n       // setCharacters(response.data.data.results)\n      })\n      .catch(err => console.log(err));\n      setChar('')\n      setIsActive(false)\n      setChave('')\n    }\n\n    return (\n     \n      <Container>\n        <Header>\n          <img id=\"logo\" src={logo} alt=\"Marvel\" />\n          <Row width=\"70%\">\n            {handleStageButtons}\n          </Row>\n          <Row>\n            <Input\n              placeholder=\"Informe o personagem\"\n              value={char}\n              onChange={(e) => setChar(e.target.value)}\n            />\n            <Buscar onClick={handleSeach}>OK</Buscar>\n          </Row>\n          \n        </Header>\n        <CardList>\n          {characters.map(person => {\n            return (\n              <Card key={person.id} thumbnail={person.thumbnail}>\n                <div id=\"img\" />\n                <Name>{person.name}</Name>\n                <p>{person.description}</p>\n              </Card>\n            )\n          })}\n          </CardList>\n          {isActive ?  \n          <ButtonMore onClick={handleMore} fontSize=\"bodyExtraLarge\">\n              Mais\n          </ButtonMore> : null}\n      </Container>\n    )\n    \n};\n\nexport default Characters;\n","import Characters from \"../../components/Characters\"\n\nexport const Home = () => {\n  return (\n    <Characters />\n  )\n}","import { BrowserRouter, Routes, Route } from \"react-router-dom\"\nimport { Home } from \"../pages/Home\"\n\nexport const Router = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n      </Routes>\n    </BrowserRouter>\n  )\n}","import { createGlobalStyle } from 'styled-components';\nimport { ThemeType } from './theme';\n\nexport const GlobalStyles = createGlobalStyle<{ theme: ThemeType }>`\n  @import url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&display=swap');\n  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\n  @import url('https://fonts.googleapis.com/css2?family=Marvel:wght@400;700&display=swap');\n\n  *{\n    margin: 0;\n    padding: 0;\n    border: 0;\n    box-sizing: border-box;\n    font-family: 'Marvel', sans-serif;\n  }\n\n  body {\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n`","import { ThemeProvider } from \"styled-components\";\n\nconst fontSizes: any = [14, 18, 20, 96]\nfontSizes.body = fontSizes[0]\nfontSizes.bodyLarge = fontSizes[1]\nfontSizes.bodyExtraLarge = fontSizes[2]\nfontSizes.displayExtraLarge = fontSizes[3]\n\nconst primary = '#000';\nconst secondary = '#F9B531';\n\nconst theme = {\n  fontSizes,\n  fonts: {\n    primary: 'Raleway',\n    secondary: 'Roboto',\n  },\n  colors: {\n    primary,\n    secondary\n  },\n};\n\nexport type ThemeType = typeof theme;\n\nexport const Theme: React.FC = ({ children }) => {\n  return (\n    <ThemeProvider theme={theme}>{children}</ThemeProvider>\n  )\n}","import React from 'react';\nimport { Router } from './routes'\nimport { GlobalStyles } from './themes/styles';\nimport { Theme } from './themes/theme';\n\nconst App: React.FC = ()  => {\n  return (\n    <Theme>\n      <GlobalStyles />\n      <Router />\n    </Theme>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}